
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.DefaultListModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Logan
 */
public class ClientFTPUI extends javax.swing.JFrame {

    private final int FILE_SIZE = 1024;
    private FileOutputStream fos;
    private BufferedOutputStream bos;
    private Socket clientSocket;
    private BufferedReader Buffer;
    private OutputStream os;
    private DataOutputStream toServer;
    /**
     * Creates new form ClientFTPUI
     */
    public ClientFTPUI() {
        initComponents();
        listLocalFiles();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        hostIP_txtfld = new javax.swing.JTextField();
        portNumber_txtfld = new javax.swing.JTextField();
        connection_btn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        serverFiles_scrllpane = new javax.swing.JScrollPane();
        serverFiles_list = new javax.swing.JList<>();
        label4 = new javax.swing.JLabel();
        clientFiles_scrllpane = new javax.swing.JScrollPane();
        clientFiles_list = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputMessage_txtarea = new javax.swing.JTextArea();
        get_btn = new javax.swing.JButton();
        put_btn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Host");

        jLabel2.setText("Port");

        hostIP_txtfld.setText("127.0.0.1");

        portNumber_txtfld.setText("5721");

        connection_btn.setText("Connect");
        connection_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                connection_btnMouseClicked(evt);
            }
        });

        jLabel3.setText("Server Files");

        serverFiles_scrllpane.setViewportView(serverFiles_list);

        label4.setText("Client Files");

        clientFiles_scrllpane.setViewportView(clientFiles_list);

        jLabel4.setText("Output Messages");

        outputMessage_txtarea.setEditable(false);
        outputMessage_txtarea.setColumns(20);
        outputMessage_txtarea.setRows(5);
        jScrollPane1.setViewportView(outputMessage_txtarea);

        get_btn.setText("Get");
        get_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                get_btnMouseClicked(evt);
            }
        });

        put_btn.setText("Put");
        put_btn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                put_btnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(hostIP_txtfld, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(portNumber_txtfld, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(connection_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(serverFiles_scrllpane, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(53, 53, 53)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(label4)
                                .addComponent(clientFiles_scrllpane, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jLabel4)))
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(89, 89, 89)
                .addComponent(get_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(put_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(105, 105, 105))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(hostIP_txtfld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(portNumber_txtfld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connection_btn))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(label4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(clientFiles_scrllpane, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                    .addComponent(serverFiles_scrllpane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(get_btn)
                    .addComponent(put_btn))
                .addGap(11, 11, 11)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connection_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_connection_btnMouseClicked
        if (connection_btn.getText().equals("Connect"))
        {
            try
            {
                int Port = Integer.parseInt(portNumber_txtfld.getText());
                clientSocket = new Socket (hostIP_txtfld.getText(), Port);
                Buffer = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                toServer = new DataOutputStream(clientSocket.getOutputStream());
                os = clientSocket.getOutputStream();
                listRemoteFiles();
                connection_btn.setText("Disconnect");
                outputMessage_txtarea.append("Connected to Server\n");
            }
            catch (UnknownHostException e)
            {
                outputMessage_txtarea.append("Failed to Connect to Server\n");
            }
            catch (IOException e)
            {
                outputMessage_txtarea.append("Failed to Create Socket\n");
            }
            catch (IllegalArgumentException e)
            {
                outputMessage_txtarea.append("Port is outside of valid range\n");
            }
        }
        else
        {
            try
            {
                toServer.writeBytes("Disconnect");
                clientSocket.close();
                connection_btn.setText("Connect");
                outputMessage_txtarea.append("Disconnected!\n");
            }
            catch (SocketException e)
            {
                outputMessage_txtarea.append("Thread blocked in IO operation.\n");
            }
            catch (IOException e)
            {
                outputMessage_txtarea.append("IO error while closing.\n");
            }
            
        }
    }//GEN-LAST:event_connection_btnMouseClicked

    private void get_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_get_btnMouseClicked
        outputMessage_txtarea.append("Receiving the file...\n");
        getFile(serverFiles_list.getSelectedValue());
        listRemoteFiles();
        listLocalFiles();
    }//GEN-LAST:event_get_btnMouseClicked

    private void put_btnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_put_btnMouseClicked
        outputMessage_txtarea.append("Sending the file...\n");
        sendFile(clientFiles_list.getSelectedValue());
        listRemoteFiles();
        listLocalFiles();
    }//GEN-LAST:event_put_btnMouseClicked

    /**
     * Lists the files from the client in a list
     */
    private void listRemoteFiles()
    {
        try
        {
        toServer.writeBytes("Refresh\n");
        DefaultListModel listModel = new DefaultListModel();
        serverFiles_list.setModel(listModel);
        String filesstring = Buffer.readLine();
        Vector v = new Vector();
        StringTokenizer st = new StringTokenizer(filesstring);
        while (st.hasMoreTokens())
        {
            v.add(st.nextToken());
        }
        serverFiles_list.setListData(v);
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Lists the files from a given client directory in a list
     */
    private void listLocalFiles()
    {
        try
        {
        DefaultListModel listModel = new DefaultListModel();
        clientFiles_list.setModel(listModel);
        Vector v = new Vector();
        File dir = new File("ClientFiles");
        File[] files = dir.listFiles();
        for (int i = 0; i < files.length; i++) 
        {
            if(files[i].isFile())
            {
                v.add(files[i].getName());
            }
        }
        clientFiles_list.setListData(v);
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Sends the data from a file as bytes to the server
     * @param fileName 
     */
    private void sendFile (String fileName)
    {
        try
        {
            toServer.writeBytes("Sending\n");
            toServer.writeBytes(fileName + "\n");
            File toSend = new File("ClientFiles\\" + fileName);
            outputMessage_txtarea.append("File: " + fileName + "\n");
            byte[] bytearray = new byte[(int) toSend.length()];
            FileInputStream fis = new FileInputStream(toSend);
            BufferedInputStream bis = new BufferedInputStream(fis);
            bis.read(bytearray);
            os.write(bytearray);
            outputMessage_txtarea.append(toSend.length() + " Bytes sent\n");
            bis.close();
            fis.close();
            outputMessage_txtarea.append("Data Connection Closed\n");
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * Reads the data for a given file from the server
     * @param fileName 
     */
    private void getFile (String fileName)
    {
        try
        {
        toServer.writeBytes("Receiving\n");
        toServer.writeBytes(fileName + "\n");
        InputStream is = clientSocket.getInputStream();
        fos = new FileOutputStream("ClientFiles\\" + fileName);
        bos = new BufferedOutputStream(fos);
        int fileSize = 0;
        do
        {
            byte[] bytearray = new byte[FILE_SIZE];
            is.read(bytearray);
            bos.write(bytearray);
            fileSize += bytearray.length;
        } while (is.available() > 0);
        outputMessage_txtarea.append("Got the File: " + fileName + "\n");
        outputMessage_txtarea.append("Size: " + fileSize + " Bytes\n");
        bos.close();
        fos.close();
        outputMessage_txtarea.append("Data Connection Closed\n");
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientFTPUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientFTPUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientFTPUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientFTPUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientFTPUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> clientFiles_list;
    private javax.swing.JScrollPane clientFiles_scrllpane;
    private javax.swing.JButton connection_btn;
    private javax.swing.JButton get_btn;
    private javax.swing.JTextField hostIP_txtfld;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label4;
    private javax.swing.JTextArea outputMessage_txtarea;
    private javax.swing.JTextField portNumber_txtfld;
    private javax.swing.JButton put_btn;
    private javax.swing.JList<String> serverFiles_list;
    private javax.swing.JScrollPane serverFiles_scrllpane;
    // End of variables declaration//GEN-END:variables
}
